---
import MobileMenuItem from '../components/MobileMenuItem.astro'
import MenuItem from '../components/MenuItem.astro'
import {getCollection} from 'astro:content'
import type {CollectionEntry} from 'astro:content'
import type {MenuItemProps} from '../types/MenuItemProps'
import {getImage} from 'astro:assets'
import type {ImageMetadata} from 'astro'

import '../styles/global.css'

interface Props {
  title: string
  previewImageUrl: string
  description: string
}

function compareMenuItemData(a: CollectionEntry<'sculptures'>, b: CollectionEntry<'sculptures'>): number {
  if (a.data.impressivenessScore > b.data.impressivenessScore) {
    return -1
  }

  if (a.data.impressivenessScore < b.data.impressivenessScore) {
    return 1
  }

  return 0
}

function isPathActive(expectedPath: string, currentPath: string): boolean {
  const regex = new RegExp(`^${expectedPath}\/?$`)
  return regex.test(currentPath)
}

function createMenuItems(sculptures: CollectionEntry<'sculptures'>[], currentPath: string): MenuItemProps[] {
  const menuItems: MenuItemProps[] = []

  menuItems.push({
    name: 'Home',
    url: '/',
    isActive: isPathActive('/', currentPath),
  })

  const sculptureMenuItems: MenuItemProps[] = sculptures
    .sort(compareMenuItemData)
    .map(item => ({
      name: item.data.title,
      url: `/${item.id}/`,
      isActive: isPathActive(`/${item.id}`, currentPath),
    }))

  menuItems.push(...sculptureMenuItems)

  menuItems.push({
    name: 'Over',
    url: '/about/',
    isActive: isPathActive('/about', currentPath),
  })

  menuItems.push({
    name: 'Contact',
    url: '/contact/',
    isActive: isPathActive('/contact', currentPath),
  })

  return menuItems
}

const sculptureCollection = await getCollection('sculptures')

const {title, description, previewImageUrl} = Astro.props

const menuItems = createMenuItems(sculptureCollection, Astro.url.pathname)

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*.webp')

const previewImageResult = await getImage({src: images[previewImageUrl](), format: 'webp'})
---

<!doctype html>
<html lang="nl">
<head>
    <title>{title} - the oak tells</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0">
    <link rel="sitemap" href="/sitemap-index.xml"/>
    <link rel="canonical" href={Astro.url}>
    <meta property="og:title" content={`${title} - the oak tells`}>
    <meta property="og:url" content={Astro.url}>
    <meta name="description" property="og:description"
          content={description}/>
    <meta property="og:image"
          content={new URL(previewImageResult.src, Astro.site)}>
    <meta name="twitter:card" content="summary_large_image">
    <meta property="twitter:image"
          content={new URL(previewImageResult.src, Astro.site)}>
    <meta name="generator" content={Astro.generator}/>
</head>
<body class="box-border bg-secondary text-primary flex flex-col min-h-dvh min-w-83">
<section class="bg-primary z-20 w-full flex justify-between lg:hidden">
    <div class="w-11"></div>
    <article class="flex grow justify-center">
        <a class:list={['text-4xl',
          'tracking-tighter',
          'text-accent',
          'font-bold',
          'p-2',
          'block',
          'font-serif']}
           href="/">the oak tells</a>
    </article>
    <button id="mobile-menu-toggle-button" type="button"
            class:list={[
              'flex-end',
              'cursor-pointer',
              'hover:bg-primary-light',
              'focus:bg-primary-lighter',
              'px-3',
              'rounded-sm']}
            aria-label="Open en sluit menu">
        <span class:list={[
          'hamburger-icon'
        ]}></span>
    </button>
</section>
<nav id="mobile-menu" class:list={['bg-primary',
  'w-full',
  'top-14',
  'z-10',
  'transition-all',
  'rounded-b-sm',
  'opacity-100',
  'translate-0',
  'absolute',
  'mobile-menu__closed',
  'lg:hidden',
  'p-3']}>
    <ul class="flex flex-col w-full items-center">
      {
        menuItems.map(({name, url, isActive}) =>
                <MobileMenuItem name={name} url={url} isActive={isActive}/>)
      }
    </ul>
</nav>
<section class="flex flex-row-reverse w-full lg:min-h-dvh">
    <article class="w-full p-5 lg:pt-8.5 lg:w-3/5">
        <section class="lg:max-w-145">
            <main class="mb-16 space-y-4">
                <slot/>
            </main>
            <footer class="bg-secondary-dark px-5 py-6 rounded-sm">
                Â© 2009 - {(new Date()).getFullYear()} the oak tells
            </footer>
        </section>
    </article>
    <article class="w-2/5 min-w-110 bg-primary flex-col items-end hidden lg:flex">
        <section class="ml-20 pl-10 pt-18 pr-8">
            <a class:list={['text-6xl',
              'tracking-tighter',
              'text-accent',
              'font-bold',
              'mb-8',
              'block',
              'font-serif']}
               href="/">the oak tells</a>
            <nav>
                <ul>
                  {
                    menuItems.map(({name, url, isActive}) =>
                            <MenuItem name={name} url={url} isActive={isActive}/>)
                  }
                </ul>
            </nav>
        </section>
    </article>
</section>
</body>
</html>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Questrial&display=swap"
      rel="stylesheet">
<script is:inline defer src="/index.js"/>
